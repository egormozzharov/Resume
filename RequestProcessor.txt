
// Наше приложение общается с удаленным сервисом: шлет запросы и получает ответы. 
// С удаленным сервером установлено единственное соединение, по которому мы шлем запросы и получаем ответы. 
// Каждый запрос содержит Id (GUID), ответ на запрос содержит его же. 
// Ответы на запросы могут приходить в произвольном порядке и с произвольными задержками. 
// Нам необходимо реализовать интерфейс, который абстрагирует факт такого мультиплексирования. 
// Реализация IRequestProcessor обязана быть потокобезопасной.

// У нас есть готовая реализация интерфейса INetworkAdapter

public record Request(Guid Id); // Ещё какие-то поля

public record Response(Guid Id); // Ещё какие-то поля

public interface INetworkAdapter
{
    /// Вычитывает очередной ответ
    Task<Response> ReadAsync(CancellationToken cancellationToken);

    /// Отправляет запрос
    Task WriteAsync(Request request, CancellationToken cancellationToken);
}

// Нам нужно реализовать интерфейс IRequestProcessor


public interface IRequestProcessor
{
    /// Запускает обработчик. Гарантированно вызывается 1 раз при старте приложения
    Task RunAsync(CancellationToken cancellationToken);

    Task StopAsync(CancellationToken cancellationToken);

    // При отмене CancellationToken не обязательно гарантировать то, что мы не отправим запрос на сервер, но клиент должен получить отмену задачи
﻿    Task<Response> SendAsync(Request request, CancellationToken cancellationToken);
}

public class RequestProcessor : IRequestProcessor
{
    private readonly INetworkAdapter _networkAdapter;
    Dictionary<Guid, TaskCompletionSource<Response>> taskCompletionSourceDict = new Dictionary<Guid, TaskCompletionSource<Response>>();
    

    public RequestProcessor(INetworkAdapter networkAdapter)
    {
        _networkAdapter = networkAdapter;
    }

    public async Task RunAsync(CancellationToken cancellationToken)
    {
        Task.Run(() => {
            while(!isRun)
            {
                response = await _networkAdapter.ReadAsync(cancellationToken);
                taskCompletionSourceDict[response.Id].SetResult(response);
                taskCompletionSourceDict.Remove[response.Id];
            }
        });     
    }

    public async Task<Response> SendAsync(Request request, CancellationToken cancellationToken)
    {
        await _networkAdapter.WriteAsync(request, cancellationToken);
        var completionSource = new TaskCompletionSource<Response>()
        taskCompletionSourceDict.Add(request.Id, completionSource);
        return await completionSource.Task;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        isRun = false;
    }
}

//
var response = await _requestProcessor.SendAsync(request, canTok);
var response = await _requestProcessor.SendAsync(request, canTok);
var response = await _requestProcessor.SendAsync(request, canTok);
var response = await _requestProcessor.SendAsync(request, canTok);
